import lombok.*;
import org.hibernate.Hibernate;

import javax.persistence.*;
import java.util.Objects;
import java.util.Set;

@Entity
@Getter
@Setter
@ToString
@RequiredArgsConstructor
@Table(name="movies")

public class Movies {

    @Id
    @Column(name = "id_movies", nullable = false)
    private Long id;

    @Column(name = "name_movie")
    private String name;

    @Column(name = "countries")
    public String countries;

    @Column(name = "date_release")
    public Long date_release;

    @Column(name = "rars")
    private int rars;

    @Column(name = "mpaa")
    private int mpaa;

    @Column(name = "time")
    private int time;

    @Column(name = "desciption")
    private String desciption;

    @OneToOne(fetch = FetchType.LAZY)
    @ToString.Exclude
    private Set<Score> score;

    @OneToOne(fetch = FetchType.LAZY)
    @ToString.Exclude
    private Set<Content> content;

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || Hibernate.getClass(this) != Hibernate.getClass(o)) return false;
        Movies movies = (Movies) o;
        return id != null && Objects.equals(id, movies.id);
    }

    @Override
    public int hashCode() {
        return getClass().hashCode();
    }
}

import lombok.*;
import org.hibernate.Hibernate;

import javax.persistence.*;
import java.util.Objects;

@Entity
@Getter
@Setter
@ToString
@RequiredArgsConstructor
@Table(name = "collections")

public class Collections {

    @Id
    @Column(name = "id", nullable = false)
    private Long id;

    @Column(name = "collections_name")
    private String name;

    @Column(name = "enable")
    private String enable;

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || Hibernate.getClass(this) != Hibernate.getClass(o)) return false;
        Collections that = (Collections) o;
        return id != null && Objects.equals(id, that.id);
    }

    @Override
    public int hashCode() {
        return getClass().hashCode();
    }
}

import lombok.*;
import org.hibernate.Hibernate;

import javax.persistence.*;
import java.util.Objects;

@Entity
@Getter
@Setter
@ToString
@RequiredArgsConstructor
@Table(name = "genres")
public class Genres {

    @Id
    @Column(name = "id_genres", nullable = false)
    private Long id;

    @Column(name = "genres_name")
    private String name;

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || Hibernate.getClass(this) != Hibernate.getClass(o)) return false;
        Genres genres = (Genres) o;
        return id != null && Objects.equals(id, genres.id);
    }

    @Override
    public int hashCode() {
        return getClass().hashCode();
    }
}

import lombok.*;
import org.hibernate.Hibernate;

import javax.persistence.*;
import java.util.Objects;
import java.util.Set;

@Entity
@Getter
@Setter
@ToString
@RequiredArgsConstructor
@Table(name = "score")
public class Score {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id_score", nullable = false)
    private Long id;

    @Column(name="movie_id_score")
    Long movie_id;

    @Column(name = "user_id")
    Long user_id;

    @Column(name = "score")
    Long score;

    @ManyToOne(fetch = FetchType.LAZY)
    @ToString.Exclude
    private Set<Movies> movies;

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || Hibernate.getClass(this) != Hibernate.getClass(o)) return false;
        Score score = (Score) o;
        return id != null && Objects.equals(id, score.id);
    }

    @Override
    public int hashCode() {
        return getClass().hashCode();
    }
}


import lombok.*;
import org.hibernate.Hibernate;

import javax.persistence.*;
import java.util.Objects;
import java.util.Set;

@Entity
@Getter
@Setter
@ToString
@RequiredArgsConstructor
@Table(name = "content")

public class Content {

    @Id
    @Column(name = "id_content", nullable = false)
    private Long id;

    @Column(name = "movie_id_content")
    private Long movie_id;

    @Column(name = "content_url")
    private String content_url;

    @ManyToOne(fetch = FetchType.LAZY)
    @ToString.Exclude
    private Set<Movies> movies;

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || Hibernate.getClass(this) != Hibernate.getClass(o)) return false;
        Content content = (Content) o;
        return id != null && Objects.equals(id, content.id);
    }

    @Override
    public int hashCode() {
        return getClass().hashCode();
    }
}

public enum Type {
    MOVIES,
    SERIALS,
    PREVIEW,
    FRAME,
    TRAILER
}

